// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#define PI          3.14159265358979323846
#define TWO_PI      6.28318530717958647693

struct SourceVertex
{
    float3 positionOS;
    float3 normalOS;
    float2 uv;
    float3 color;
};

StructuredBuffer<SourceVertex> _SourceVerts;

struct DrawVertex
{
    float3 positionWS;
    float2 uv;
    float3 diffuseColor;
};

struct DrawTriangle
{
    float3 normalOS;
    DrawVertex vertices[3];
};

AppendStructuredBuffer<DrawTriangle> _DrawTris;

struct IndirectArgs
{
    uint numVertsPerInstance;
    uint numInstances;
    uint startVertexIndex;
    uint startInstanceIndex;
};

RWStructuredBuffer<IndirectArgs> _IndirectArgsBuffer;

#define GRASS_BLADES 4
#define GRASS_SEGMENTS 5
#define GRASS_VERTS_PER_BLADE (GRASS_SEGMENTS * 2 + 1)

int _NumSourceVerts;

float4x4 _LocalToWorld;

float _Time;

half _GrassHeight;
half _GrassWidth;
float _GrassRandomHeight;

half _BladeRadius;
float _BladeForward;
float _BladeCurve;
int _MaxBladesPerVertex;
int _MaxSegmentsPerBlade;

float _MinFadeDist, _MaxFadeDist;

uniform float3 _PositionMoving;
uniform float3 _CameraPositionWS;

// Helper Functions
 
float rand(float3 co)
{
    return frac(
    sin(dot(co.xyz, float3(12.9898, 78.233, 53.539))) * 43758.5453);
}
 
// A function to compute an rotation matrix which rotates a point
// by angle radians around the given axis
// By Keijiro Takahashi
float3x3 AngleAxis3x3(float angle, float3 axis)
{
    float c, s;
    sincos(angle, s, c);
 
    float t = 1 - c;
    float x = axis.x;
    float y = axis.y;
    float z = axis.z;
 
    return float3x3(
    t * x * x + c, t * x * y - s * z, t * x * z + s * y,
    t * x * y + s * z, t * y * y + c, t * y * z - s * x,
    t * x * z - s * y, t * y * z + s * x, t * z * z + c);
}

// Generate each grass vertex for output triangles
DrawVertex GrassVertex(float3 positionOS, float width, float height, float offset, float curve, float2 uv, float3x3 rotation, float3 color)
{
    DrawVertex output = (DrawVertex)0;

    float3 newPosOS = positionOS + mul(rotation, float3(width, height, curve) + float3(0, 0, offset));
    output.positionWS = mul(_LocalToWorld, float4(newPosOS, 1)).xyz;
    output.uv = uv;
    output.diffuseColor = color;
    
    return output;
}

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if ((int)id.x >= _NumSourceVerts) return;

    SourceVertex sv = _SourceVerts[id.x];
    float forward = _BladeForward;

    float3 perpendicularAngle = float3(0, 0, 1);
    float3 faceNormal = cross(perpendicularAngle, sv.normalOS);
    float3 worldPos = mul(_LocalToWorld, float4(sv.positionOS, 1)).xyz;

    float distFromCamera = distance(worldPos, _CameraPositionWS);
    float distanceFade = 1 - saturate((distFromCamera - _MinFadeDist) / (_MaxFadeDist - _MinFadeDist));

    float3 v0 = sv.positionOS.xyz;
    float3 color = sv.color;

    // Set grass height.
    _GrassWidth *= sv.uv.x;
    _GrassHeight *= sv.uv.y;
    _GrassHeight *= clamp(rand(sv.positionOS.xyz), 1 - +_GrassRandomHeight, 1 + _GrassRandomHeight);

    // Blades and segments.
    int numBladesPerVert = min(GRASS_BLADES, max(1, _MaxBladesPerVertex));
    int numSegmentsPerBlade = min(GRASS_SEGMENTS, max(1, _MaxSegmentsPerBlade));
    int numTrisPerBlade = (numSegmentsPerBlade - 1) * 2 + 1;

    DrawVertex drawVerts[GRASS_VERTS_PER_BLADE];

    for (int j = 0; j < numBladesPerVert * distanceFade; ++j)
    {
        // Set rotation and radius of the blades.
        float3x3 facingRotationMatrix = AngleAxis3x3(
            rand(sv.positionOS.xyz) * TWO_PI + j,
            float3(0, 1, -1));
        float3x3 transformationMatrix = facingRotationMatrix;
        float bladeRadius = j / (float) numBladesPerVert;
        float offset = (1 - bladeRadius);

        for (int i = 0; i < numSegmentsPerBlade; ++i)
        {
            // Taper width, increase height.
            float t = i / (float) numSegmentsPerBlade;
            float segmentHeight = _GrassHeight * t;
            float segmentWidth  = _GrassWidth * (1-t);

            // Make the first segment thinner.
            segmentWidth = i == 0 ? _GrassWidth * 0.3 : segmentWidth;

            float segmentForward = pow(abs(t), _BladeCurve) * forward;

            // Add below the line declaring float segmentWidth.
            float3x3 xform = (i == 0) ? facingRotationMatrix : transformationMatrix;

            float3 newPos = v0;

            // Append first vert.
            drawVerts[i * 2] = GrassVertex(newPos, segmentWidth, segmentHeight, offset, segmentForward, float2(0, t), xform, color);

            // Append second vert.
            drawVerts[i * 2 + 1] = GrassVertex(newPos, -segmentWidth, segmentHeight, offset, segmentForward, float2(1, t), xform, color);
        }
        
        // Append top vert.
        float3 topPosOS = v0;
        drawVerts[numSegmentsPerBlade * 2] = GrassVertex(topPosOS, 0, _GrassHeight, offset, forward, float2(0.5, 1), transformationMatrix, color);

        // Append triangles.
        for (int k = 0; k < numTrisPerBlade; ++k)
        {
            DrawTriangle tri = (DrawTriangle)0;
            tri.normalOS = faceNormal;
            tri.vertices[0] = drawVerts[k];
            tri.vertices[1] = drawVerts[k + 1];
            tri.vertices[2] = drawVerts[k + 2];
            _DrawTris.Append(tri);
        }
    }

    InterlockedAdd(_IndirectArgsBuffer[0].numVertsPerInstance, numTrisPerBlade * numBladesPerVert * 3);
}
